Tree/branching structure of resources

Not all resources for a page are known to the browser at the initial
load time, nor after fetching the main HTML file.  Resources might be
referenced/included by other resources;  for example JS might
dynamically (at load time) create requests for images, etc.  The taller
this tree, the more sequential transfers, which impacts load efficiency
and speed, which in turn requires radios to stay active longer, etc.


Differential analysis between vanilla and ad-block runs

When we create a differential view between both runs, we can tag of
ad-related resources.  We then can operate off the vanilla run (which
includes tagged resources), and we don't have to work with two separate
data sets.


Which hosts (of ads) are actually ad network hosts

To circumvent same-origin policy restrictions, domains (allegedly) use
canonical domain names for their ad servers, which are actually an ad
network's servers.  E.g. ads.nytimes.com might actually be
ads.doubleclick.net, but by using the nytimes.com domain, cookies can be
passed to the ad network.  We can look at this by performing a DNS CNAME
analysis, or even reverse DNS and/or whois queries for the IP block.


Cookies

This could be a big area:  which page items, validity duration, which
domains, size of stored data.  Which cookie names match across domains,
which content matches across domains (indication for either similar
software or even aliased services).


GET request parameters

I've see very elaborate parametrized requests, which essentially force
the browser to always fetch a new copy and never operate from the
cache.  I'm a bit unclear on how/what to analyze there, but there are
many of those for sure.


Run separate perf instance in parallel with the logging instance (don't
profile logging instance, as we have it now)

This allows a more accurate assessment of the performance metrics (no
logging overhead).  We then can try to correlate aggregate domain
metrics with aggregate performance counter values and maybe create a
relation between these metrics.  This is a statistical method, and might
not lead to any reasonable insight.  But maybe it can turn out that
different file types have (in average) different processing costs, etc.
We could also look at the time series of a page loading, but that will
be even harder to process.


Adapt screen size for devices

Desktop version should use a desktop resolution, and the mobile instance
a common mobile resolution, such as 480x800.  Some pages dynamically
adapt their content to the screen size, so we don't want to mess up with
this.


Cache: headers

What do servers signal as cache durations, for different types of
resources?  This clearly impacts subsequent visits to the same page/site.


Redirects

Many sites use redirects while fetching resources.  I believe this was
originally intended to allow restructuring of web sites without breaking
links, but from what I've seen this seems to be used as a tracking
intermediary without incurring too much data transfer (request ->
redirect -> long-time cachable resource; subsequent accesses will still
observe the redirect, but then can use their cached resources), or as a
delegation mechanism for ads.


Which resources are shared across domains?

There are several resources (such as "like" buttons, javascript, etc.)
that are shared across many sites (same URL).  What are their
properties, etc.  A possible extension could be to actually observe
content and calculate a hash to observe copies of the same file (or even
chunks...).  Is the browser allowed to cache them?


How many resources are fetched from the same server?

If many resources come from the same server (or domain?), pipelining of
transfers can improve efficiency and load time.  A possible extension
could be to have the server optionally "push" required page resources,
reducing required roundtrips.


https run

Maybe perform a run with https instead of https.  Observe how many
domains are available via https;  how does https impact low-level
hardware metrics on the client side?


"Unique" host, common domain

There are some services that provide a custom server name, under the
umbrella of their domain name.  These are usually CDNs or CDN-like
services, such as CloudFront.  Maybe something interesting is in there?
A bit vague what to look at.

